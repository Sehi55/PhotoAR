"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createH264MP4Encoder = exports.initialize = void 0;
const HME = require("./videorecorder");
let promise;
function initialize(wasmUrl) {
    promise = new Promise(resolve => {
        let module = HME({
            locateFile: (path, prefix) => {
                if (path.endsWith("videorecorder.wasm")) {
                    return wasmUrl;
                }
                return prefix + path;
            },
            onRuntimeInitialized: () => {
                delete module.then;
                resolve(module);
            }
        });
    });
    return promise;
}
exports.initialize = initialize;
/** Construct the H264MP4Encoder. Waits for the WASM to complete loading before returning. */
exports.createH264MP4Encoder = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!promise)
        throw new Error("Unable to initialize video recorder worker");
    let hme = yield promise;
    const encoder = new hme.H264MP4Encoder();
    encoder.FS = hme.FS;
    return encoder;
});
