import { Event1, Event } from "./event";
import { Options } from "./options";
export { Options } from "./options";
export declare class VideoRecorderResult {
    arrayBuffer: ArrayBuffer;
    constructor(arrayBuffer: ArrayBuffer);
    get blob(): Blob;
    asDataURL(): Promise<string>;
}
export declare function createVideoRecorder(width: number, height: number, acquireFrame: () => ArrayBuffer, options?: Partial<Options>): Promise<VideoRecorder>;
export declare class VideoRecorder {
    protected _width: number;
    protected _height: number;
    protected _acquireFrame: () => ArrayBuffer;
    protected _options: Options;
    static create(width: number, height: number, acquireFrame: () => ArrayBuffer, options?: Partial<Options>): Promise<VideoRecorder>;
    onStart: Event;
    onComplete: Event1<VideoRecorderResult>;
    result: VideoRecorderResult | undefined;
    private _worker;
    private _needsFrame;
    private _isRunning;
    private _lastFrameTime;
    private _audioContext;
    private _processor;
    private _source;
    protected constructor(_width: number, _height: number, _acquireFrame: () => ArrayBuffer, _options: Options);
    start(): Promise<void>;
    stop(): Promise<void>;
    private _getTime;
    private _audioFrame;
    frameUpdate(): void;
    private _loadMessageNumber;
    loaded(): Promise<void>;
}
export declare function createCanvasVideoRecorder(canvas: HTMLCanvasElement, options?: Partial<Options>): Promise<VideoRecorder>;
export declare class CanvasVideoRecorder extends VideoRecorder {
    static _createCanvasVideoRecorder(canvas: HTMLCanvasElement, options?: Partial<Options>): Promise<VideoRecorder>;
    private _canvas;
    private _offscreenCanvas;
    private _offscreenContext;
    private constructor();
    private _getData;
}
