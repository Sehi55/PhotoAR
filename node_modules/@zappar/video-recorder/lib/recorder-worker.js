"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enc = require("./encoder");
let encoderPromise;
let launchHandler = (evt) => {
    var _a;
    if (evt && evt.data && evt.data.type === "init") {
        let url = location.href.startsWith("blob") ? evt.data.wasm : require("./videorecorder.wasm");
        enc.initialize((_a = url === null || url === void 0 ? void 0 : url.default) !== null && _a !== void 0 ? _a : url);
        self.removeEventListener("message", launchHandler);
        initialize();
    }
};
self.addEventListener("message", launchHandler);
function initialize() {
    return __awaiter(this, void 0, void 0, function* () {
        self.addEventListener("message", (msg) => __awaiter(this, void 0, void 0, function* () {
            if (msg.data && msg.data.type === "load") {
                if (!encoderPromise)
                    encoderPromise = enc.createH264MP4Encoder();
                yield encoderPromise;
                self.postMessage({
                    type: "loaded",
                    token: msg.data.token
                });
                return;
            }
            if (msg.data && msg.data.type === "start") {
                if (!encoderPromise)
                    encoderPromise = enc.createH264MP4Encoder();
                let encoder = yield encoderPromise;
                encoder.frameRate = msg.data.maxFrameRate;
                encoder.width = msg.data.width;
                encoder.height = msg.data.height;
                encoder.speed = msg.data.speed;
                encoder.quantizationParameter = msg.data.quality;
                encoder.kbps = msg.data.targetBitrateKBPS;
                encoder.temporalDenoise = false;
                encoder.initialize();
                if (msg.data.audioSampleRate)
                    encoder.initializeAudio(msg.data.audioSampleRate);
            }
            if (msg.data && msg.data.type === "frame") {
                if (!encoderPromise)
                    return;
                let encoder = yield encoderPromise;
                encoder.addFrameRgba(msg.data.dat, msg.data.duration);
                self.postMessage({ type: "nextframe" });
                return;
            }
            if (msg.data && msg.data.type === "aud") {
                if (!encoderPromise)
                    return;
                let encoder = yield encoderPromise;
                encoder.addAudio(msg.data.dat, msg.data.dat.byteLength / 4);
                return;
            }
            if (msg.data && msg.data.type === "stop") {
                if (!encoderPromise)
                    return;
                let encoder = yield encoderPromise;
                encoder.finalize();
                let arr = encoder.FS.readFile(encoder.outputFilename);
                self.postMessage({
                    type: "finish",
                    arr: arr.buffer
                }, [arr.buffer]);
                encoder.delete();
                encoderPromise = undefined;
            }
        }));
    });
}
